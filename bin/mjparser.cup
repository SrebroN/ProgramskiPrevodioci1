package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code{:
	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected=false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* Program = "program" ident {ConstDecl | VarDecl | RecordDecl} "{" {MethodDecl} "}". */

terminal PROG, OPBRACKET, CLBRACKET, CONST, SEMI, ASSIGN, COMMA, OPSQBRACKET, CLSQBRACKET;
terminal String IDENT;
terminal Integer NUMBER,BOOL;
terminal Character CHARACTER;

nonterminal Program, ConVarDecList, MethodDecList, ConDecList, VarDecList, ConDecl, Constant, 
ConDeclMore, Type, VarDecListBracket, VarDecMore;


Program ::= (Program) PROG IDENT ConVarDecList OPBRACKET MethodDecList CLBRACKET;

ConVarDecList ::=   (ConVarDecList_con) ConVarDecList ConDecList
					|
					(ConVarDecList_var) ConVarDecList VarDecList
					|
					(ConVarDecList_epsilon) /*epsilon*/
					;

ConDecList ::= (ConDecList) CONST Type ConDecl ConDeclMore SEMI;

Type ::= (Type) IDENT;

ConDecl ::= (ConDecl) IDENT ASSIGN Constant;

ConDeclMore::= (ConDeclMore_comma) COMMA ConDecl ConDeclMore
				|
				(ConDeclMore_e) /*epsilon*/
				;
				
Constant ::= (Constant_n) NUMBER
			|
			(Constant_c) CHARACTER
			|
			(Constant_b) BOOL
			;

VarDecList ::= (VarDecList) Type IDENT VarDecListBracket VarDecMore SEMI;

VarDecListBracket ::=   (VarDecListBracket_b) OPSQBRACKET CLSQBRACKET
						|
						(VarDecListBracket_e)/*epsilon*/
						;

VarDecMore ::= 	(VarDecMore_m) COMMA IDENT VarDecListBracket VarDecMore
				|
				(VarDecMore_e)/*epsilon*/
				;






