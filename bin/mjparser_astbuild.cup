package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code{:
	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected=false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG,OPBRACKET,CLBRACKET;
terminal String IDENT;

nonterminal Program Program;
nonterminal ConVarDecList ConVarDecList;
nonterminal MethodDeclList MethodDeclList;

/* Program = "program" ident {ConstDecl | VarDecl | RecordDecl} "{" {MethodDecl} "}". */

Program ::= (Program) PROG IDENT:I1 ConVarDecList:C2 OPBRACKET MethodDeclList:M3 CLBRACKET {: RESULT=new Program(I1, C2, M3); RESULT.setLine(I1left); :};

